[
  {
    "description": "generated array values",
    "schemas": [
      {
        "allOf": [
          {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "string"
                }
              },
              "required": ["value"]
            }
          },
          {
            "$ref": "some://rules"
          }
        ]
      }
    ],
    "tests": [
      {
        "description": "should handle maxItems",
        "schema": "schemas.0",
        "refs": [
          {
            "id": "some://rules",
            "maxItems": 3
          }
        ],
        "valid": true
      },
      {
        "description": "should handle minItems",
        "schema": "schemas.0",
        "refs": [
          {
            "id": "some://rules",
            "maxItems": 3,
            "minItems": 2
          }
        ],
        "valid": true
      },
      {
        "description": "should handle uniqueItems",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["a", "b", "c", "d", "e"]
          },
          "uniqueItems": true,
          "maxItems": 3,
          "minItems": 2
        },
        "valid": true
      },
      {
        "description": "should handle fixed arrays",
        "schema": {
          "type": "array",
          "items": [
            {
              "type": "integer"
            },
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ]
        },
        "valid": true
      },
      {
        "description": "should handle additionalItems",
        "schema": {
          "type": "array",
          "minItems": 20,
          "maxItems": 30,
          "additionalItems": { "type": ["string", "boolean"] }
        },
        "valid": true
      },
      {
        "description": "should validate items using all options",
        "schema": {
          "type": "array",
          "minItems": 20,
          "maxItems": 30,
          "uniqueItems": true,
          "additionalItems": false
        },
        "throws": "missing items for .+? in \\/"
      },
      {
        "description": "should handle inferred type (when possible)",
        "schema": {
          "items": {
            "type": "string"
          }
        },
        "type": "array"
      },
      {
        "description": "should handle property name matching inferrable object properties (Issue 62)",
        "schema": {
          "id": "matches",
          "type": "object",
          "required": ["items"],
          "properties": {
            "items": {
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "maxItems": 10
            }
          }
        },
        "type": "object"
      },
      {
        "description": "should handle nested property name matching inferrable object properties (Issue 62)",
        "schema": {
          "id": "matches",
          "type": "object",
          "required": ["items"],
          "properties": {
            "items": {
              "items": {
                "required": ["items"],
                "properties": {
                  "items": {
                    "items": {
                      "type": "string"
                    },
                    "minItems": 1,
                    "maxItems": 10
                  }
                }
              },
              "minItems": 1,
              "maxItems": 10
            }
          }
        },
        "type": "object"
      }
    ]
  }
]
